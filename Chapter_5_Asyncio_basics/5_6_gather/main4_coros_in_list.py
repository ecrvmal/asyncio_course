import asyncio

async def my_coro(num):                      # Определяем асинхронную функцию (корутину) my_coro с аргументом num
    print(f"Корутина {num} началась")        # Выводим сообщение о начале работы корутины с указанием ее номера
    await asyncio.sleep(num)                 # Используем асинхронный sleep, чтобы "приостановить" выполнение этой корутины на количество секунд, равное num
    print(f"Корутина {num} закончилась")     # Выводим сообщение о завершении работы корутины с указанием ее номера
    return num                               # Возвращаем номер корутины как результат ее выполнения

async def main():                            # Определяем основную асинхронную функцию main
    coros = [my_coro(i) for i in range(1, 6)] # Создаем список корутин, передавая в каждую уникальное число от 1 до 5
    results = await asyncio.gather(*coros)   # Используем asyncio.gather, чтобы запустить все корутины одновременно и дождаться их выполнения
    print(results)                           # Выводим результаты выполнения корутин

asyncio.run(main())