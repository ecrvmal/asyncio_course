import asyncio

# Корутина производителя
async def producer(queue):
    for i in range(5):
        await queue.put(i)
        print(f'Производитель: Положил в очередь элемент {i}')   # Информируем о положении элемента в очередь
        await asyncio.sleep(1)                                   # Имитируем задержку производителя

# Корутина потребителя
async def consumer(queue):
    while True:
        item = await queue.get()
        print(f'Потребитель: Получил элемент из очереди {item}')    # Информируем о получении элемента из очереди
        await asyncio.sleep(0.5)                                    # Имитируем задержку потребителя
        queue.task_done()                                           # Отмечаем выполнение задачи

# Основная корутина
async def main():
    queue = asyncio.Queue()                                         # Создаем очередь
    task_producer = asyncio.create_task(producer(queue))            # Создаем задачу для производителя
    task_consumer = asyncio.create_task(consumer(queue))            # Создаем задачу для потребителя
    await asyncio.gather(task_producer, task_consumer)              # Ожидаем завершения задач производителя и потребителя

# Запускаем асинхронную программу
asyncio.run(main())                                                 # Запускаем основную корутину и все вложенные корутины


# Производитель: Положил в очередь элемент 0
# Потребитель: Получил элемент из очереди 0
# Производитель: Положил в очередь элемент 1
# Потребитель: Получил элемент из очереди 1
# Производитель: Положил в очередь элемент 2
# Потребитель: Получил элемент из очереди 2
# Производитель: Положил в очередь элемент 3
# Потребитель: Получил элемент из очереди 3
# Производитель: Положил в очередь элемент 4
# Потребитель: Получил элемент из очереди 4
