import asyncio

async def my_coroutine():                        # Определяем асинхронную функцию (корутину)
    await asyncio.sleep(1)                       # Приостанавливаем выполнение этой корутины на 1 секунду. Мы используем этот метод для имитации какой-либо асинхронной операции
    print("Задача выполнена")                    # Выводим сообщение об окончании выполнения задачи

async def main():                                # Определяем основную асинхронную функцию
    task = asyncio.create_task(my_coroutine())   # Создаем задачу из корутины. Этот метод позволяет начать выполнение корутины и возвращает объект Task, который можно ожидать
    await task                                   # Ожидаем выполнения задачи. Благодаря этому код будет ждать выполнения задачи, прежде чем завершиться

asyncio.run(main())                              # Запускаем главную асинхронную функцию. Это удобный способ запустить корутину на верхнем уровне, он создает новый событийный цикл и закрывает его