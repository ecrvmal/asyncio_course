import asyncio                                     

async def cook_pasta():                                 # Определяем асинхронную функцию для приготовления пасты
    print("Начинаем готовить пасту")                    # Выводим сообщение о начале приготовления пасты
    await asyncio.sleep(5)                              # Используем asyncio.sleep для эмуляции времени приготовления пасты. Await приостанавливает выполнение функции на 5 секунд, не блокируя выполнение других асинхронных операций
    print("Паста готова")                               # После "ожидания" 5 секунд выводим сообщение о том, что паста готова

async def cook_sauce():                                 # Определяем асинхронную функцию для приготовления соуса
    print("Начинаем готовить соус")                     # Выводим сообщение о начале приготовления соуса
    await asyncio.sleep(3)                              # Используем asyncio.sleep для эмуляции времени приготовления соуса. Await приостанавливает выполнение функции на 3 секунды, не блокируя выполнение других асинхронных операций
    print("Соус готов")                                 # После "ожидания" 3 секунд выводим сообщение о том, что соус готов

async def main():                                       # Определяем асинхронную функцию, которая будет запускаться при выполнении программы
    await asyncio.gather(cook_pasta(), cook_sauce())      # Используем asyncio.gather для запуска двух корутин одновременно и ожидания их завершения. Await приостанавливает выполнение функции до тех пор, пока не будут завершены обе корутины

asyncio.run(main())                                     # Запускаем асинхронную функцию main(), используя asyncio.run для создания и выполнения нового событийного цикла
