import asyncio

async def first_coroutine(duration):    # Объявляем первую корутину, которая принимает в качестве аргумента продолжительность ожидания
    print("Начинаем first_coroutine")   # Выводим информационное сообщение о начале выполнения первой корутины
    await asyncio.sleep(duration)       # Приостанавливаем выполнение текущей корутины на указанное количество секунд.
                                        # asyncio.sleep используется для имитации длительной операции
    print("Завершаем first_coroutine")  # Выводим информационное сообщение о завершении выполнения первой корутины
    return "Результат 1"                # Возвращаем результат выполнения первой корутины

async def second_coroutine(duration):   # Объявляем вторую корутину, аналогичную первой, с таким же аргументом
    print("Начинаем second_coroutine")  # Выводим информационное сообщение о начале выполнения второй корутины
    await asyncio.sleep(duration)       # Аналогично первой корутине, приостанавливаем выполнение на указанное время
    print("Завершаем second_coroutine") # Выводим информационное сообщение о завершении выполнения второй корутины
    return "Результат 2"                # Возвращаем результат выполнения второй корутины

async def main():
    result1, result2 = await asyncio.gather(first_coroutine(5), second_coroutine(3))
    print("Результат 1:", result1)
    print("Результат 2:", result2)


asyncio.run(main())


