import asyncio


async def my_coroutine():               # Определение асинхронной корутины my_coroutine
    print("Корутина запустилась")       # Вывод сообщения о начале работы корутины
    await asyncio.sleep(5)              # Приостановка выполнения корутины на 5 секунд
    print("Корутина завершилась")       # Вывод сообщения о завершении работы корутины
    return 42                           # Возвращение результата выполнения корутины

async def main():                               # Определение основной асинхронной функции main
    task = asyncio.create_task(my_coroutine())  # Создание объекта Task для корутины my_coroutine
    await asyncio.sleep(1)                      # Приостановка выполнения основной функции на 1 секунд
    print("Функция main продолжает работу")     # Вывод сообщения о продолжении выполнения функции main

    try:
        await asyncio.wait_for(task, timeout=2)     # Ожидание завершения выполнения задачи task с таймаутом в 2 секунды
        result = task.result()                      # Получение результата выполнения корутины my_coroutine
        print(f"Результат выполнения корутины my_coroutine: {result}")  # Вывод результата выполнения корутины my_coroutine
    except asyncio.TimeoutError:
        print("Задача не была завершена в указанное время.")            # Обработка исключения при превышении времени ожидания завершения задачи



asyncio.run(main())# Запуск асинхронной функции main с помощью asyncio.run